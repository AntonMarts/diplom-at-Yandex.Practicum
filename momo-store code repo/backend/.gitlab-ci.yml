#changes 0.1.2
variables:
  VERSION: "0.1.${CI_PIPELINE_ID}"

stages:
  - build
  - test
  - release
  - deploy


include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'  
  - remote: 'https://gitlab.com/gitlab-org/gitlab/-/raw/2851f4d5/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml'


build-backend-code-job:
  image: golang:1.18-alpine3.17
  stage: build  
  before_script:
  #/// устанавливаем необходимые пакеты
    - apk add curl tar
  script:

  #/// создаем артефакт приложения и присваиваем ему версию по SemVer
    - cd backend/cmd/api/
    - go build -o momo-backend${VERSION} 
  #/// архивируем артефакт и копируем его в Nexus репозиторий
    - tar czvf momo-store-${VERSION}.tar.gz momo-backend${VERSION}
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file momo-store-${VERSION}.tar.gz ${NEXUS_REPO_URL_BE}/${VERSION}/momo-store-${VERSION}.tar.gz 



#/// запускаем тестирование кода встроенным тестом
go-test-code-job:
  image: golang:1.18-alpine3.17
  stage: test 
  variables:
    CGO_ENABLED: 0
  dependencies:
    - build-backend-code-job
  script:
    - cd backend
    - go test -v ./...

#/// запускаем тестирование кода средствами Sonarqube
sonarqube-backend-sast:
  stage: test
  dependencies:
    - build-backend-code-job
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]  
  script:
    - cd backend
    - >
      sonar-scanner 
      -Dsonar.projectName=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.sources=. 
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACK}


build-backend-docker-job:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:

  #/// Создаем Docker image приложения и сохраняем его в GitLab Container Registry. Образу присваивается версия по SemVer
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA


upload-backend-release:
  only:
    changes:
      - backend/*
  needs:
    - build-backend-docker-job
    - sonarqube-backend-sast
    - go-test-code-job
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/momo-backend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-backend:latest



deploy_backend:
  stage: deploy
  needs:
    - upload-backend-release
  image: docker:20.10.12-dind

  #/// если хотим сделать деплой по кнопке
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #    when: manual
  #  - if: '$CI_COMMIT_BRANCH == "master"'
  #    when: manual
  before_script:
  #/// устанавливаем необходимые пакеты
    - apk add curl openssh-client bash docker docker-compose
    - eval $(ssh-agent -s)
  #/// сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
 #/// отменям дефолтный хост для docker context, вносим в конфиг ssh параметр отмены проверки хоста
    - unset DOCKER_HOST
    - echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config
 #/// создаем docker context и логинимся в хранилище образов
    - docker context create momo-backend --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker context use momo-backend 
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
  # на основе созданного контекста momo-backend запускаем docker контейнер, сначала удаляя запущеный   
  #  - docker-compose --context momo-backend rm -sf backend  
    - docker-compose --context momo-backend pull backend
  # -d запуск в состоянии deatach, --scale множитель мастабирования контейнера
    - docker-compose --context momo-backend up -d --scale backend=1

  environment:
    name: $CI_COMMIT_REF_SLUG

