
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    ingress.alb.yc.io/subnets:  {{ .Values.annotations.subnets }}
    ingress.alb.yc.io/external-ipv4-address: {{ .Values.annotations.ip }}
    ingress.alb.yc.io/group-name: {{ .Values.annotations.groupname }}
    ingress.alb.yc.io/security-groups: {{ .Values.annotations.sg }}
  labels:
    app: {{ .Chart.Name }}    
    app.kubernetes.io/name: momo-frontend
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app.kubernetes.io/component: {{ .Chart.Name }}
    app.kubernetes.io/part-of: momo-store
    env: "{{ .Values.environment }}"

spec:
  # В кластере может быть несколько Ingress Controllers, мы используем NGINX
  ingressClassName: "nginx"
  tls:
    - hosts:
        - {{ .Values.ingress.host | quote }} 
      secretName: yc-certmgr-cert-id-fpqspl3civ9a76nsou7m 
  rules:
    # Хост определяет правило направления траффика по доменному имени
  - host: {{ .Values.ingress.host | quote }}  
    http:
      # Для различных путей в URL можно указать различные бэкенд-сервисы
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            # Заранее создан сервис типа NodePort
            # Он выступает в качестве бэкенда нашего Ingress
            name: {{ .Chart.Name }}
            port:
              # У сервиса может быть несколько портов, указываем нужный нам
              number: 80


